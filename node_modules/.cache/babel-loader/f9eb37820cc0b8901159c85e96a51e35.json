{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'; // Note: Change v1 to v2 on rapid api\n\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': process.env.REACT_APP_CRYPTO_RAPIDAPI_HOST,\n  'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY\n};\n\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_CRYPTO_API_URL\n  }),\n  endpoints: builder => ({\n    getCryptos: builder.query({\n      query: count => createRequest(`/coins?limit=${count}`)\n    }),\n    getCryptoDetails: builder.query({\n      query: coinId => createRequest(`/coin/${coinId}`)\n    }),\n    // Note: Change the coin price history endpoint from this - `coin/${coinId}/history/${timeperiod} to this - `coin/${coinId}/history?timeperiod=${timeperiod}`\n    getCryptoHistory: builder.query({\n      query: ({\n        coinId,\n        timeperiod\n      }) => createRequest(`coin/${coinId}/history?timeperiod=${timeperiod}`)\n    }),\n    // Note: To access this endpoint you need premium plan\n    getExchanges: builder.query({\n      query: () => createRequest('/exchanges')\n    })\n  })\n});\nexport const {\n  useGetCryptosQuery,\n  useGetCryptoDetailsQuery,\n  useGetExchangesQuery,\n  useGetCryptoHistoryQuery\n} = cryptoApi;","map":{"version":3,"sources":["C:/Users/91790/OneDrive/Desktop/project_cryptoverse-main/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","process","env","REACT_APP_CRYPTO_RAPIDAPI_HOST","REACT_APP_RAPIDAPI_KEY","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","baseUrl","REACT_APP_CRYPTO_API_URL","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timeperiod","getExchanges","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetExchangesQuery","useGetCryptoHistoryQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C,C,CAEA;;AAEA,MAAMC,gBAAgB,GAAG;AACvB,qBAAmBC,OAAO,CAACC,GAAR,CAAYC,8BADR;AAEvB,oBAAkBF,OAAO,CAACC,GAAR,CAAYE;AAFP,CAAzB;;AAIA,MAAMC,aAAa,GAAIC,GAAD,KAAU;AAAEA,EAAAA,GAAF;AAAOC,EAAAA,OAAO,EAAEP;AAAhB,CAAV,CAAtB;;AAEA,OAAO,MAAMQ,SAAS,GAAGV,SAAS,CAAC;AACjCW,EAAAA,WAAW,EAAE,WADoB;AAEjCC,EAAAA,SAAS,EAAEX,cAAc,CAAC;AAAEY,IAAAA,OAAO,EAAEV,OAAO,CAACC,GAAR,CAAYU;AAAvB,GAAD,CAFQ;AAGjCC,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACvBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACxBA,MAAAA,KAAK,EAAGC,KAAD,IAAWZ,aAAa,CAAE,gBAAeY,KAAM,EAAvB;AADP,KAAd,CADW;AAKvBC,IAAAA,gBAAgB,EAAEJ,OAAO,CAACE,KAAR,CAAc;AAC9BA,MAAAA,KAAK,EAAGG,MAAD,IAAYd,aAAa,CAAE,SAAQc,MAAO,EAAjB;AADF,KAAd,CALK;AASvB;AACAC,IAAAA,gBAAgB,EAAEN,OAAO,CAACE,KAAR,CAAc;AAC9BA,MAAAA,KAAK,EAAE,CAAC;AAAEG,QAAAA,MAAF;AAAUE,QAAAA;AAAV,OAAD,KAA4BhB,aAAa,CAAE,QAAOc,MAAO,uBAAsBE,UAAW,EAAjD;AADlB,KAAd,CAVK;AAcvB;AACAC,IAAAA,YAAY,EAAER,OAAO,CAACE,KAAR,CAAc;AAC1BA,MAAAA,KAAK,EAAE,MAAMX,aAAa,CAAC,YAAD;AADA,KAAd;AAfS,GAAd;AAHsB,CAAD,CAA3B;AAwBP,OAAO,MAAM;AACXkB,EAAAA,kBADW;AAEXC,EAAAA,wBAFW;AAGXC,EAAAA,oBAHW;AAIXC,EAAAA;AAJW,IAKTlB,SALG","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\n// Note: Change v1 to v2 on rapid api\n\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': process.env.REACT_APP_CRYPTO_RAPIDAPI_HOST,\n  'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY,\n};\nconst createRequest = (url) => ({ url, headers: cryptoApiHeaders });\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  baseQuery: fetchBaseQuery({ baseUrl: process.env.REACT_APP_CRYPTO_API_URL }),\n  endpoints: (builder) => ({\n    getCryptos: builder.query({\n      query: (count) => createRequest(`/coins?limit=${count}`),\n    }),\n\n    getCryptoDetails: builder.query({\n      query: (coinId) => createRequest(`/coin/${coinId}`),\n    }),\n\n    // Note: Change the coin price history endpoint from this - `coin/${coinId}/history/${timeperiod} to this - `coin/${coinId}/history?timeperiod=${timeperiod}`\n    getCryptoHistory: builder.query({\n      query: ({ coinId, timeperiod }) => createRequest(`coin/${coinId}/history?timeperiod=${timeperiod}`),\n    }),\n\n    // Note: To access this endpoint you need premium plan\n    getExchanges: builder.query({\n      query: () => createRequest('/exchanges'),\n    }),\n  }),\n});\n\nexport const {\n  useGetCryptosQuery,\n  useGetCryptoDetailsQuery,\n  useGetExchangesQuery,\n  useGetCryptoHistoryQuery,\n} = cryptoApi;\n"]},"metadata":{},"sourceType":"module"}