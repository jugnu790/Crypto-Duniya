{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/91790/OneDrive/Desktop/Crypto Sathi Stat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:/Users/91790/OneDrive/Desktop/Crypto Sathi Stat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(divider);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.millify = void 0;\n\nvar options_1 = require(\"./options\");\n\nvar utils_1 = require(\"./utils\"); // Most commonly used digit grouping base.\n\n\nvar DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\n\nfunction divider(value) {\n  var denominator, result;\n  return _regeneratorRuntime.wrap(function divider$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // Create a mutable copy of the base.\n          denominator = DIGIT_GROUPING_BASE;\n\n        case 1:\n          if (!true) {\n            _context.next = 10;\n            break;\n          }\n\n          result = value / denominator;\n\n          if (!(result < 1)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 5:\n          _context.next = 7;\n          return result;\n\n        case 7:\n          // The denominator is increased every iteration by multiplying\n          // the base by itself, until a decimal value remains.\n          denominator *= DIGIT_GROUPING_BASE;\n          _context.next = 1;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\n\n\nfunction millify(value, options) {\n  var _a; // Override default options with options supplied by user.\n\n\n  var opts = options ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n\n  if (!Array.isArray(opts.units) || !opts.units.length) {\n    throw new Error(\"Option `units` must be a non-empty array\");\n  } // Validate value for type and length.\n\n\n  var val = utils_1.parseValue(value); // Add a minus sign (-) prefix if it's a negative number.\n\n  var prefix = val < 0 ? \"-\" : \"\"; // Work only with positive values for simplicity's sake.\n\n  val = Math.abs(val); // Keep dividing the input value by the digit grouping base\n  // until the decimal and the unit index is deciphered.\n\n  var unitIndex = 0;\n\n  var _iterator = _createForOfIteratorHelper(divider(val)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var result = _step.value;\n      val = result;\n      unitIndex += 1;\n    } // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var unitIndexOutOfRange = unitIndex >= opts.units.length;\n\n  if (unitIndexOutOfRange) {\n    return value.toString();\n  } // Round decimal up to desired precision.\n\n\n  var rounded = utils_1.roundTo(val, opts.precision); // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n  // The rounded value needs another iteration in the divider cycle.\n\n  var _iterator2 = _createForOfIteratorHelper(divider(rounded)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _result = _step2.value;\n      rounded = _result;\n      unitIndex += 1;\n    } // Calculate the unit suffix and make it lowercase (if needed).\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n  var suffix = opts.lowercase ? unit.toLowerCase() : unit; // Add a space between number and abbreviation.\n\n  var space = opts.space ? \" \" : \"\"; // Replace decimal mark if desired.\n\n  var formatted = rounded.toString().replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n  return \"\".concat(prefix).concat(formatted).concat(space).concat(suffix);\n}\n\nexports.millify = millify;\nexports.default = millify;","map":{"version":3,"sources":["C:/Users/91790/OneDrive/Desktop/Crypto Sathi Stat/node_modules/millify/dist/millify.js"],"names":["divider","Object","defineProperty","exports","value","millify","options_1","require","utils_1","DIGIT_GROUPING_BASE","denominator","result","options","_a","opts","assign","defaultOptions","Array","isArray","units","length","Error","val","parseValue","prefix","Math","abs","unitIndex","unitIndexOutOfRange","toString","rounded","roundTo","precision","unit","suffix","lowercase","toLowerCase","space","formatted","replace","decimalSeparator","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n    // Create a mutable copy of the base.\n    let denominator = DIGIT_GROUPING_BASE;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            // End of operation. We can't divide the value any further.\n            return;\n        }\n        yield result;\n        // The denominator is increased every iteration by multiplying\n        // the base by itself, until a decimal value remains.\n        denominator *= DIGIT_GROUPING_BASE;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    var _a;\n    // Override default options with options supplied by user.\n    const opts = options\n        ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // Validate value for type and length.\n    let val = utils_1.parseValue(value);\n    // Add a minus sign (-) prefix if it's a negative number.\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake.\n    val = Math.abs(val);\n    // Keep dividing the input value by the digit grouping base\n    // until the decimal and the unit index is deciphered.\n    let unitIndex = 0;\n    for (const result of divider(val)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    if (unitIndexOutOfRange) {\n        return value.toString();\n    }\n    // Round decimal up to desired precision.\n    let rounded = utils_1.roundTo(val, opts.precision);\n    // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n    // The rounded value needs another iteration in the divider cycle.\n    for (const result of divider(rounded)) {\n        rounded = result;\n        unitIndex += 1;\n    }\n    // Calculate the unit suffix and make it lowercase (if needed).\n    const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n    const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    // Add a space between number and abbreviation.\n    const space = opts.space ? \" \" : \"\";\n    // Replace decimal mark if desired.\n    const formatted = rounded\n        .toString()\n        .replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n"]},"metadata":{},"sourceType":"script"}